import { Elysia, t } from "elysia";

import "@hs/endpoints/src/query";
import "@hs/endpoints/src/server";
import { isMongodbContext } from "../../plugins/isMongodbContext";
import { isConfigContext } from "../../plugins/isConfigContext";
import { makeJoinEventBuilder } from "../../procedures/makeJoin";

// "method":"GET",
// "url":"http://rc1:443/_matrix/federation/v1/make_join/%21kwkcWPpOXEJvlcollu%3Arc1/%40admin%3Ahs1?ver=1&ver=2&ver=3&ver=4&ver=5&ver=6&ver=7&ver=8&ver=9&ver=10&ver=11&ver=org.matrix.msc3757.10&ver=org.matrix.msc3757.11",

export const makeJoinRoute = new Elysia().get(
	"/make_join/:roomId/:userId",
	async ({ params, query, headers, ...context }) => {
		if (!isMongodbContext(context)) {
			throw new Error("No mongodb context");
		}
		if (!isConfigContext(context)) {
			throw new Error("No config context");
		}
		const {
			config,
			mongo: { getAuthEvents, getLastEvent },
		} = context;

		const roomId = decodeURIComponent(params.roomId);
		const userId = decodeURIComponent(params.userId);

		if (!userId.includes(":") || !userId.includes("@")) {
			throw new Error("Invalid sender");
		}
		if (!roomId.includes(":") || !roomId.includes("!")) {
			throw new Error("Invalid room Id");
		}

		const makeJoinEvent = makeJoinEventBuilder(getLastEvent, getAuthEvents);
		return await makeJoinEvent(roomId, userId, query.ver, config.name);
	},
	{
		headers: t.Object({
			authorization: t.String({
				description: "The authorization header",
			}),
		}),
		response: {
			200: t.Object({}),
			400: t.Object({}),
			403: t.Object({}),
			404: t.Object({}),
		},
		query: t.Object({
			ver: t.String({
				description:
					"The version of the room where the user is being invited to.",
			}),
		}),
		params: t.Object(
			{
				roomId: t.String({
					// description: "The room ID that the user is being invited to.",
				}),
				userId: t.String({
					// description:
					// 	"The user ID for the invite event, generated by the inviting server.",
				}),
			},
			{
				examples: [
					{
						roomId: "!abc123:matrix.org",
						userId: "@admin:example.org",
					},
				],
			},
		),
		detail: {
			security: [
				{
					matrixAuth: [],
				},
			],
		},
	},
);
